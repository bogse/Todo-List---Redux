{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';// const [todoList, setTodoList] = useState([])\n// setTodoList(action)\nvar initialState={todoList:[]};var todoSlice=createSlice({name:'todos',initialState:initialState,reducers:{saveTodo:function saveTodo(state,action){state.todoList.push(action.payload);},setCheck:function setCheck(state,action){state.todoList.map(function(item){if(action.payload===item.id){if(item.done===true){item.done=false;}else{item.done=true;}}});}}});var _todoSlice$actions=todoSlice.actions,saveTodo=_todoSlice$actions.saveTodo,setCheck=_todoSlice$actions.setCheck;export{saveTodo,setCheck};export var selectTodoList=function selectTodoList(state){return state.todos.todoList;};export default todoSlice.reducer;","map":{"version":3,"sources":["D:/projects/todo-redux/src/features/todoSlice.js"],"names":["createSlice","initialState","todoList","todoSlice","name","reducers","saveTodo","state","action","push","payload","setCheck","map","item","id","done","actions","selectTodoList","todos","reducer"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAEA;AACA;AACA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,QAAQ,CAAE,EADO,CAArB,CAIA,GAAMC,CAAAA,SAAS,CAAGH,WAAW,CAAC,CAC1BI,IAAI,CAAE,OADoB,CAE1BH,YAAY,CAAZA,YAF0B,CAG1BI,QAAQ,CAAE,CACNC,QAAQ,CAAE,kBAACC,KAAD,CAAQC,MAAR,CAAmB,CACzBD,KAAK,CAACL,QAAN,CAAeO,IAAf,CAAoBD,MAAM,CAACE,OAA3B,EACH,CAHK,CAKNC,QAAQ,CAAE,kBAACJ,KAAD,CAAQC,MAAR,CAAmB,CACzBD,KAAK,CAACL,QAAN,CAAeU,GAAf,CAAmB,SAAAC,IAAI,CAAI,CACvB,GAAIL,MAAM,CAACE,OAAP,GAAmBG,IAAI,CAACC,EAA5B,CAAgC,CAC9B,GAAID,IAAI,CAACE,IAAL,GAAc,IAAlB,CAAwB,CACpBF,IAAI,CAACE,IAAL,CAAY,KAAZ,CACH,CAFD,IAEQ,CACJF,IAAI,CAACE,IAAL,CAAY,IAAZ,CACH,CACF,CACJ,CARD,EASH,CAfK,CAHgB,CAAD,CAA7B,CAsBO,uBAA+BZ,SAAS,CAACa,OAAzC,CAAQV,QAAR,oBAAQA,QAAR,CAAkBK,QAAlB,oBAAkBA,QAAlB,C,0BAEP,MAAO,IAAMM,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAV,KAAK,QAAIA,CAAAA,KAAK,CAACW,KAAN,CAAYhB,QAAhB,EAA5B,CAEP,cAAeC,CAAAA,SAAS,CAACgB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\n// const [todoList, setTodoList] = useState([])\r\n// setTodoList(action)\r\nconst initialState = {\r\n    todoList: []\r\n}\r\n\r\nconst todoSlice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {\r\n        saveTodo: (state, action) => {\r\n            state.todoList.push(action.payload)\r\n        },\r\n\r\n        setCheck: (state, action) => {\r\n            state.todoList.map(item => {\r\n                if (action.payload === item.id) {\r\n                  if (item.done === true) {\r\n                      item.done = false\r\n                  } else  {\r\n                      item.done = true\r\n                  }\r\n                }\r\n            })\r\n        }\r\n    }\r\n});\r\n\r\nexport const { saveTodo, setCheck } = todoSlice.actions\r\n\r\nexport const selectTodoList = state => state.todos.todoList\r\n\r\nexport default todoSlice.reducer"]},"metadata":{},"sourceType":"module"}